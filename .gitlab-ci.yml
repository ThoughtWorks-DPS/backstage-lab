image: docker:latest

variables:
  PASSWORD: $SERVICE_PRINCIPAL_PASSWORD
  TENANT_ID: $TENANT_ID
  APP_ID: $APP_ID
  SUBSCRIPTION: 3344a922-f246-4f27-a6f1-3c85586f7b99
  API_TOKEN: $DEPLOYMENT_TOKEN
  APP_PATH: '$CI_PROJECT_DIR/packages/app'
  OUTPUT_PATH: '$APP_PATH/dist'

stages:
  - test
  - build
  - deploy
  - deployWebapp

services:
  - docker:dind


test:
  stage: test
  script:
    - echo "hey akshar"
    - pwd
    - ls -ltr
    - echo $CI_PROJECT_DIR

build_staging_image:
  stage: build
  script:
    - echo "===> Initiating Docker Build process"
    - docker login backstagepp.azurecr.io -u $APP_ID -p $PASSWORD
    # - docker build . -t backstage
    # - docker tag backstage backstagepp.azurecr.io/backstage:new
    # - echo "====> Initiating Docker image push to ACR"
    # - docker push backstagepp.azurecr.io/backstage:new
  rules:
    - changes:
        - kubernetes
        - terraform
        - pipelines-for-azure
        - ".gitlab-ci.yml"
      when: never


deploy:
  stage: deploy
  image: mcr.microsoft.com/azure-cli
  script:
    - az login --service-principal --username $APP_ID --password $PASSWORD --tenant $TENANT_ID
    # - az aks get-credentials --resource-group backstage-aks_group --name backstage-aks
    # - echo "====> Installing kubectl"
    # - az aks install-cli
    # - echo "====> Creating kubernetes namespace. Calling template file"
    # - kubectl apply -f kubernetes/namespace.yaml
    # - |
    #     if [[ `kubectl -n backstagehttp get secrets |grep "backstage-secrets"` ==  "" ]]; then
    #       echo "=======> Creating secret for backstage"
    #       kubectl -n backstagehttp create secret generic backstage-secrets \
    #       --from-literal=GITHUB_TOKEN=$GITHUB_TOKEN \
    #       --from-literal=AZURE_TECHDOCS_STORAGE_KEY=$AZURE_TECHDOCS_STORAGE_KEY
    #     else
    #       echo "=======> Secret already present"
    #     fi
    # - echo "====> Creating kubernetes backstage depoloyment and service. Calling template file"
    # - kubectl apply -n backstagehttp -f kubernetes/backstage.yaml -f kubernetes/backstage-service.yaml
    # - VAR=$(kubectl -n backstagehttp describe services |grep "LoadBalancer Ingress" |cut -d ":" -f2)
    # - VAR=$(echo ${VAR// /})
    # - echo "====> Access Backstage on - http://$VAR"
  rules:
    - changes:
        - terraform
        - pipelines-for-azure
        - ".gitlab-ci.yml"
      when: never

deployWebapp:
  stage: deployWebapp
  # image: registry.gitlab.com/static-web-apps/azure-static-web-apps-deploy
  image: mcr.microsoft.com/appsvc/staticappsclient:stable
  script:
    - pwd
    - ls -ltr
    - echo $CI_PROJECT_DIR
    - yarn install
    - cd $APP_PATH
    - pwd
    - yarn build
    - /bin/staticsites/StaticSitesClient upload --verbose --app $OUTPUT_PATH --skipAppBuild true --apiToken DEPLOYMENT_TOKEN  
    - echo "App deployed successfully."
  # rules:
  #   - changes:
  #       - terraform
  #       - pipelines-for-azure
  #       - ".gitlab-ci.yml"
  #       - kubernetes
  #     when: never
  
